/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { RigidBody } from "@react-three/rapier";

type GLTFResult = GLTF & {
  nodes: {
    Enemy_ExtraSmall: THREE.SkinnedMesh;
    Root: THREE.Bone;
  };
  materials: {
    Atlas: THREE.MeshStandardMaterial;
  };
};
//
// type ActionName =
//   | "CharacterArmature|Death"
//   | "CharacterArmature|Fast_Flying"
//   | "CharacterArmature|Flying_Idle"
//   | "CharacterArmature|Headbutt"
//   | "CharacterArmature|HitReact"
//   | "CharacterArmature|No"
//   | "CharacterArmature|Punch"
//   | "CharacterArmature|Yes";
// type GLTFActions = Record<ActionName, THREE.AnimationAction>;
//
export function Npc(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null);
  const { nodes, materials } = useGLTF("/enemy.glb") as GLTFResult;
  return (
    <RigidBody position={[4, -2, 4]} type="fixed" colliders="trimesh">
      <group
        onClick={() => alert("click")}
        ref={group}
        {...props}
        dispose={null}
      >
        <pointLight position={[0, 2, 0]} color={"#f00"} intensity={2} />
        <group name="Root_Scene">
          <group name="RootNode">
            <group
              name="CharacterArmature"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <primitive object={nodes.Root} />
            </group>
            <skinnedMesh
              name="Enemy_ExtraSmall"
              geometry={nodes.Enemy_ExtraSmall.geometry}
              material={materials.Atlas}
              skeleton={nodes.Enemy_ExtraSmall.skeleton}
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            />
          </group>
        </group>
      </group>
    </RigidBody>
  );
}

useGLTF.preload("/enemy.glb");
